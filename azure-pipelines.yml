# https://dev.azure.com/home-assistant

trigger:
  batch: true
  branches:
    include:
    - dev
  tags:
    include:
    - '*'
variables:
  - name: versionBuilder
    value: '3.2'
  - name: versionWheels
    value: '0.6'
  - group: docker
  - group: wheels
  - group: github
  - group: twine


jobs:

- job: 'Wheels'
  condition: eq(variables['Build.SourceBranchName'], 'dev')
  timeoutInMinutes: 360
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    maxParallel: 3
    matrix:
      amd64:
        buildArch: 'amd64'
      i386:
        buildArch: 'i386'
      armhf:
        buildArch: 'armhf'
      armv7:
        buildArch: 'armv7'
      aarch64:
        buildArch: 'aarch64'
  steps:
  - script: |
      sudo apt-get update
      sudo apt-get install -y --no-install-recommends \
        qemu-user-static \
        binfmt-support \
        curl

      sudo mount binfmt_misc -t binfmt_misc /proc/sys/fs/binfmt_misc
      sudo update-binfmts --enable qemu-arm
      sudo update-binfmts --enable qemu-aarch64
    displayName: 'Initial cross build'
  - script: |
      mkdir -p .ssh
      echo -e "-----BEGIN RSA PRIVATE KEY-----\n$(wheelsSSH)\n-----END RSA PRIVATE KEY-----" >> .ssh/id_rsa
      ssh-keyscan -H $(wheelsHost) >> .ssh/known_hosts
      chmod 600 .ssh/*
    displayName: 'Install ssh key'
  - script: sudo docker pull homeassistant/$(buildArch)-wheels:$(versionWheels)
    displayName: 'Install wheels builder'
  - script: |
      cp requirements_all.txt requirements_wheels.txt
      curl -s -o requirements_diff.txt https://raw.githubusercontent.com/home-assistant/home-assistant/master/requirements_all.txt

      requirement_files="requirements_wheels.txt requirements_diff.txt"
      for requirement_file in ${requirement_files}; do
        sed -i "s|# pytradfri|pytradfri|g" ${requirement_file}
        sed -i "s|# pybluez|pybluez|g" ${requirement_file}
        sed -i "s|# bluepy|bluepy|g" ${requirement_file}
        sed -i "s|# beacontools|beacontools|g" ${requirement_file}
        sed -i "s|# RPi.GPIO|RPi.GPIO|g" ${requirement_file}
        sed -i "s|# raspihats|raspihats|g" ${requirement_file}
        sed -i "s|# rpi-rf|rpi-rf|g" ${requirement_file}
        sed -i "s|# blinkt|blinkt|g" ${requirement_file}
        sed -i "s|# fritzconnection|fritzconnection|g" ${requirement_file}
        sed -i "s|# pyuserinput|pyuserinput|g" ${requirement_file}
        sed -i "s|# evdev|evdev|g" ${requirement_file}
        sed -i "s|# smbus-cffi|smbus-cffi|g" ${requirement_file}
        sed -i "s|# i2csense|i2csense|g" ${requirement_file}
        sed -i "s|# python-eq3bt|python-eq3bt|g" ${requirement_file}
        sed -i "s|# pycups|pycups|g" ${requirement_file}
        sed -i "s|# homekit|homekit|g" ${requirement_file}
        sed -i "s|# decora_wifi|decora_wifi|g" ${requirement_file}
        sed -i "s|# decora|decora|g" ${requirement_file}
        sed -i "s|# PySwitchbot|PySwitchbot|g" ${requirement_file}
        sed -i "s|# pySwitchmate|pySwitchmate|g" ${requirement_file}
        sed -i "s|# face_recognition|face_recognition|g" ${requirement_file}
      done
    displayName: 'Prepare requirements files for Hass.io'
  - script: |
      sudo docker run --rm -v $(pwd):/data:ro -v $(pwd)/.ssh:/root/.ssh:rw \
        homeassistant/$(buildArch)-wheels:$(versionWheels) \
        --apk "build-base;cmake;git;linux-headers;bluez-dev;libffi-dev;openssl-dev;glib-dev;eudev-dev;libxml2-dev;libxslt-dev;libpng-dev;libjpeg-turbo-dev;tiff-dev;autoconf;automake;cups-dev;linux-headers;gmp-dev;mpfr-dev;mpc1-dev;ffmpeg-dev" \
        --index $(wheelsIndex) \
        --requirement requirements_wheels.txt \
        --requirement-diff requirements_diff.txt \
        --upload rsync \
        --remote wheels@$(wheelsHost):/opt/wheels
    displayName: 'Run wheels build'


- job: 'VersionValidate'
  condition: startsWith(variables['Build.SourceBranch'], 'refs/tags')
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python 3.7'
    inputs:
      versionSpec: '3.7'
  - script: |
      setup_version="$(python setup.py -V)"
      branch_version="$(Build.SourceBranchName)"

      if [ "${setup_version}" != "${branch_version}" ]; then
        echo "Version of tag ${branch_version} don't match with ${setup_version}!"
        exit 1
      fi
    displayName: 'Check version of branch/tag'
  - script: |
      sudo apt-get update
      sudo apt-get install -y --no-install-recommends \
        jq curl

      release="$(Build.SourceBranchName)"
      created_by="$(curl -s https://api.github.com/repos/home-assistant/home-assistant/releases/tags/${release} | jq --raw-output '.author.login')"

      if [[ "${created_by}" =~ ^(balloob|pvizeli|fabaff|robbiet480)$ ]]; then
        exit 0
      fi

      echo "${created_by} is not allowed to create an release!"
      exit 1
    displayName: 'Check rights'


- job: 'ReleasePython'
  condition: and(startsWith(variables['Build.SourceBranch'], 'refs/tags'), succeeded('VersionValidate'))
  dependsOn:
  - 'VersionValidate'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python 3.7'
    inputs:
      versionSpec: '3.7'
  - script: pip install twine wheel
    displayName: 'Install tools'
  - script: python setup.py sdist bdist_wheel
    displayName: 'Build package'
  - script: |
      export TWINE_USERNAME="$(twineUser)"
      export TWINE_PASSWORD="$(twinePassword)"
      
      twine upload dist/* --skip-existing
    displayName: 'Upload pypi'


- job: 'ReleaseDocker'
  condition: and(startsWith(variables['Build.SourceBranch'], 'refs/tags'), succeeded('VersionValidate'))
  dependsOn:
  - 'VersionValidate'
  timeoutInMinutes: 120
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    maxParallel: 5
    matrix:
      amd64:
        buildArch: 'amd64'
        buildMachine: 'qemux86-64,intel-nuc'
      i386:
        buildArch: 'i386'
        buildMachine: 'qemux86'
      armhf:
        buildArch: 'armhf'
        buildMachine: 'qemuarm,raspberrypi'
      armv7:
        buildArch: 'armv7'
        buildMachine: 'raspberrypi2,raspberrypi3,odroid-xu,tinker'
      aarch64:
        buildArch: 'aarch64'
        buildMachine: 'qemuarm-64,raspberrypi3-64,odroid-c2,orangepi-prime'
  steps:
  - script: sudo docker login -u $(dockerUser) -p $(dockerPassword)
    displayName: 'Docker hub login'
  - script: sudo docker pull homeassistant/amd64-builder:$(versionBuilder)
    displayName: 'Install Builder'
  - script: |
      set -e

      sudo docker run --rm --privileged \
        -v ~/.docker:/root/.docker \
        -v /run/docker.sock:/run/docker.sock:rw \
        homeassistant/amd64-builder:$(versionBuilder) \
        --homeassistant $(Build.SourceBranchName) "--$(buildArch)" \
        -r https://github.com/home-assistant/hassio-homeassistant \
        -t generic --docker-hub homeassistant

      sudo docker run --rm --privileged \
        -v ~/.docker:/root/.docker \
        -v /run/docker.sock:/run/docker.sock:rw \
        homeassistant/amd64-builder:$(versionBuilder) \
        --homeassistant-machine "$(Build.SourceBranchName)=$(buildMachine)" \
        -r https://github.com/home-assistant/hassio-homeassistant \
        -t machine --docker-hub homeassistant
    displayName: 'Build Release'


- job: 'ReleaseHassio'
  condition: and(startsWith(variables['Build.SourceBranch'], 'refs/tags'), succeeded('ReleaseDocker'))
  dependsOn:
    - 'ReleaseDocker'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script: |
      sudo apt-get update
      sudo apt-get install -y --no-install-recommends \
        git jq curl

      git config --global user.name "Pascal Vizeli"
      git config --global user.email "pvizeli@syshack.ch"
      git config --global credential.helper store

      echo "https://$(githubToken):x-oauth-basic@github.com" > $HOME/.git-credentials
    displayName: 'Install requirements'
  - script: |
      set -e

      version="$(Build.SourceBranchName)"

      git clone https://github.com/home-assistant/hassio-version
      cd hassio-version

      dev_version="$(jq --raw-output '.homeassistant.default' dev.json)"
      beta_version="$(jq --raw-output '.homeassistant.default' beta.json)"
      stable_version="$(jq --raw-output '.homeassistant.default' stable.json)"

      if [[ "$version" =~ b ]]; then
        sed -i "s|$dev_version|$version|g" dev.json
        sed -i "s|$beta_version|$version|g" beta.json
      else
        sed -i "s|$dev_version|$version|g" dev.json
        sed -i "s|$beta_version|$version|g" beta.json
        sed -i "s|$stable_version|$version|g" stable.json
      fi

      git commit -am "Bump Home Assistant $version"
      git push
    displayName: 'Update version files'
